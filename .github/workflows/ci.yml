name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  PNPM_VERSION: "8"

jobs:
  setup:
    name: Setup & Install Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=pnpm-${{ hashFiles('**/package.json') }}" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            pnpm-

      - name: Install dependencies
        run: pnpm install

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install

      - name: Run ESLint
        run: npx eslint src/ --ext .js,.jsx,.ts,.tsx --max-warnings 0
        continue-on-error: false

      - name: Check code formatting (if Prettier is configured)
        run: |
          if [ -f ".prettierrc" ] || [ -f ".prettierrc.json" ] || [ -f "prettier.config.js" ]; then
            echo "Prettier configuration found, checking formatting..."
            npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"
          else
            echo "No Prettier configuration found, skipping formatting check"
          fi
        continue-on-error: true

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test -- --coverage --watchAll=false
        env:
          CI: true

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  test-backend:
    name: Test Backend Functions
    runs-on: ubuntu-latest
    needs: setup
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Test Lambda Functions Structure
        run: |
          echo "üîç Checking Lambda functions structure..."

          # Check if Lambda functions exist
          if [ -d "amplify/backend/function" ]; then
            echo "‚úÖ Lambda functions directory found"
            
            # List all Lambda functions
            echo "üìã Available Lambda functions:"
            find amplify/backend/function -maxdepth 1 -type d -not -path "amplify/backend/function" | while read dir; do
              func_name=$(basename "$dir")
              echo "  - $func_name"
              
              # Check if package.json exists
              if [ -f "$dir/src/package.json" ]; then
                echo "    ‚úÖ package.json found"
              else
                echo "    ‚ö†Ô∏è  package.json not found"
              fi
              
              # Check if index.js exists
              if [ -f "$dir/src/index.js" ]; then
                echo "    ‚úÖ index.js found"
              else
                echo "    ‚ö†Ô∏è  index.js not found"
              fi
            done
          else
            echo "‚ùå No Lambda functions directory found"
            exit 1
          fi

      - name: Install Lambda Dependencies (Future Test Setup)
        run: |
          echo "üîß Setting up future backend testing structure..."

          # Create a test structure for future backend tests
          mkdir -p .github/tests/backend

          cat > .github/tests/backend/README.md << 'EOF'
          # Backend Testing Setup

          This directory is prepared for future Lambda function tests.

          ## Structure
          ```
          .github/tests/backend/
          ‚îú‚îÄ‚îÄ unit/           # Unit tests for individual functions
          ‚îú‚îÄ‚îÄ integration/    # Integration tests
          ‚îî‚îÄ‚îÄ utils/          # Test utilities and helpers
          ```

          ## Adding Tests

          1. For each Lambda function in `amplify/backend/function/`, create corresponding test files
          2. Use Jest or your preferred testing framework
          3. Test both business logic and AWS integration points

          ## Example Test Structure
          ```javascript
          // .github/tests/backend/unit/createDeadline.test.js
          const { handler } = require('../../../amplify/backend/function/createDeadline/src/index');

          describe('createDeadline Lambda', () => {
            test('should validate input correctly', () => {
              // Test implementation
            });
          });
          ```
          EOF

          echo "üìÅ Backend test structure created for future use"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "Running pnpm audit..."
          pnpm audit --audit-level moderate || {
            echo "Security vulnerabilities found. Checking severity..."
            if pnpm audit --audit-level high; then
              echo "High severity vulnerabilities found!"
              exit 1
            else
              echo "Only low/moderate vulnerabilities found - proceeding"
              exit 0
            fi
          }

      - name: Check for secrets (simple grep)
        run: |
          echo "Checking for potential secrets..."
          # Verifica pattern comuni di secrets
          if grep -r -i --exclude-dir=node_modules --exclude-dir=.git \
            -E "(password|secret|key|token|api_key).*=.*['\"][^'\"]{10,}['\"]" . || \
            grep -r --exclude-dir=node_modules --exclude-dir=.git \
            -E "AKIA[0-9A-Z]{16}" . || \
            grep -r --exclude-dir=node_modules --exclude-dir=.git \
            -E "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}" .; then
            echo "‚ö†Ô∏è  Potential secrets detected!"
            echo "Please review the above matches and ensure no sensitive data is committed."
            # Non facciamo fallire la pipeline, solo warning
          else
            echo "‚úÖ No obvious secrets detected"
          fi

  amplify-validation:
    name: Validate Amplify Configuration
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Amplify Structure
        run: |
          echo "üîç Validating Amplify project structure..."

          # Check required Amplify files
          required_files=(
            "amplify/cli.json"
            "amplify/backend/backend-config.json"
            "amplify.yml"
          )

          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file is missing"
              exit 1
            fi
          done

          # Validate backend-config.json syntax
          if ! jq empty amplify/backend/backend-config.json; then
            echo "‚ùå Invalid JSON in backend-config.json"
            exit 1
          else
            echo "‚úÖ backend-config.json is valid JSON"
          fi

          # Check Lambda functions
          echo "üìã Lambda functions found:"
          if [ -d "amplify/backend/function" ]; then
            find amplify/backend/function -maxdepth 1 -type d -not -path "amplify/backend/function" | while read dir; do
              echo "  - $(basename "$dir")"
            done
          fi

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs:
      [
        setup,
        lint,
        test-frontend,
        test-backend,
        security-scan,
        amplify-validation,
      ]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## üöÄ Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.test-frontend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.test-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Amplify Validation | ${{ needs.amplify-validation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**‚ÑπÔ∏è Build & Deploy**: Automatically managed by AWS Amplify on every push to \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.test-frontend.result }}" == "success" ]]; then
            echo "‚úÖ **CI pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "üöÄ **Code is ready for automatic Amplify deploy**" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **CI pipeline failed. Check the jobs above.**" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **Amplify deploy may fail if there are critical errors**" >> $GITHUB_STEP_SUMMARY
          fi
